// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team3620.robot.subsystems;


import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DriverStation.Alliance;

import java.util.HashMap;
import java.util.Map;

import javax.swing.DropMode;

import org.usfirst.frc.team3620.robot.RobotMap;
import org.usfirst.frc3620.misc.RobotMode;
import org.usfirst.frc3620.misc.BlinkinDict;
import org.usfirst.frc3620.misc.BlinkinDict.Color;

import edu.wpi.first.wpilibj.DriverStation;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class LightSubsystem extends Subsystem {
	Timer initTime = new Timer();
	DriverStation.Alliance teamColor = DriverStation.getInstance().getAlliance();


	HashMap<Integer, Double> lightsPriority = new HashMap<Integer, Double>();

	public void modeChange (RobotMode newMode, RobotMode previousMode) {
		if (newMode != RobotMode.DISABLED) {
			//Activates when the robot is on
			lightsPriority.put(3, Color.DARK_GREEN.value);
		}
		if ((newMode == RobotMode.AUTONOMOUS || newMode== RobotMode.TELEOP) && previousMode == RobotMode.DISABLED) {
			//Activates when temporarily when robot is put into auto or teleop
			initTime.reset();
			initTime.start();
			if (teamColor == DriverStation.Alliance.Red) {
				//Flashes red
				lightsPriority.put(0, Color.STROBE_TEAMCOLOR2.value);
			}
			else if (teamColor == DriverStation.Alliance.Blue) {
				//Flashes blue
				lightsPriority.put(0, Color.STROBE_TEAMCOLOR1.value);
			}
		}
		if (newMode == RobotMode.TEST) {
			lightsPriority.put(2, Color.TWINKLES_RAINBOW_PALETTE.value);
		}
	}
	public void setEvent (String event, Boolean condition) {
		if (event == "cube") {
			//Sets when in possession of cube
			if(condition) {lightsPriority.put(1, Color.GOLD.value);}
			else {lightsPriority.remove(1, Color.GOLD.value);}
		}
		if (event == "lift") {
			//Sets when lift is in motion
			double teamLight;

			if(teamColor == DriverStation.Alliance.Red) {teamLight = Color.LIGHTCHASE_TEAMCOLOR2.value;}
			else {teamLight = Color.LIGHTCHASE_TEAMCOLOR1.value;}

			if(condition) {
				lightsPriority.put(1, teamLight);
			}
			else {
				lightsPriority.remove(1, teamLight);
			}

		}
	}
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final SpeedController lightPWM9 = RobotMap.lightSubsystemLightPWM9;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	@Override
	public void periodic() {

		if (initTime.get() >= 1.5) {
			lightsPriority.remove(0);
			initTime.stop();
		}

		//Checks priority ladder
		if (lightsPriority.get(0) != null) {lightPWM9.set(lightsPriority.get(0));}
		else if (lightsPriority.get(1) != null) {lightPWM9.set(lightsPriority.get(1));}
		else if (lightsPriority.get(2) != null) {lightPWM9.set(lightsPriority.get(2));}
		else if (lightsPriority.get(3) != null) {lightPWM9.set(lightsPriority.get(3));}

	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

}

