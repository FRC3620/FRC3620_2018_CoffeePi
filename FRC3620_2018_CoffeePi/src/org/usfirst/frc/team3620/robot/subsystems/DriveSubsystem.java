// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team3620.robot.subsystems;


import edu.wpi.first.wpilibj.command.Subsystem;

import org.usfirst.frc.team3620.robot.RobotMap;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftSpeedController = RobotMap.driveSubsystemLeftSpeedController;
    private final SpeedController rightSpeedController = RobotMap.driveSubsystemRightSpeedController;
    private final DifferentialDrive pWMDifferentialDrive = RobotMap.driveSubsystemPWMDifferentialDrive;
    
    
    private final WPI_TalonSRX talonSRX1 = RobotMap.driveSubsystemTalonSRX1;
    private final WPI_VictorSPX victorSPX2 = RobotMap.driveSubsystemVictorSPX2;
    private final WPI_VictorSPX victorSPX3 = RobotMap.driveSubsystemVictorSPX3;
    private final SpeedControllerGroup leftSpeedControllerGroup = RobotMap.driveSubsystemLeftSpeedControllerGroup;
    
    private final WPI_TalonSRX talonSRX4 = RobotMap.driveSubsystemTalonSRX4;
    private final WPI_VictorSPX victorSPX5 = RobotMap.driveSubsystemVictorSPX5;
    private final WPI_VictorSPX victorSPX6 = RobotMap.driveSubsystemVictorSPX6;
    private final SpeedControllerGroup rightSpeedControllerGroup = RobotMap.driveSubsystemRightSpeedControllerGroup;
    
    private final DifferentialDrive cANDifferentialDrive = RobotMap.driveSubsystemCANDifferentialDrive;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static Boolean reverse;
	private static Boolean highGear;//for the motors
	private static Boolean practice;//Use PWM channels on mule board(true) OR use canTalons on comp. bot.(false)
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
	
	
	public void useWPMdrive() {
		practice = true;
	}
	
	public void useCANdrive() {
		practice = false;
	}
	
	
	
	private double lowerLimit(double value, double lowerLimit) {//This function removes low input values to insure low voltage don't fidget the motors
		if(Math.abs(value)<=lowerLimit) {
			return(0.0);
		}
		return(value);
	}
	
	private int getSpeedModifier() {
		return(((int(!(reverse))*2)-1));//this will return 1 if reverse is false, and -1 if reverse is true.
	}
	
	
	public void teleOpDrive(double speed,double turn) {
		speed=lowerLimit(speed,0.2)*getSpeedModifier();
		turn=lowerLimit(turn,0.2)*getSpeedModifier();
		if(practice) {
			pWMDifferentialDrive.arcadeDrive(speed, turn);
		} else {
			cANDifferentialDrive.acadeDrive(speed, turn);
		}
	}

	public void autoDrive(double speed,double turn) {
		speed=lowerLimit(speed,0.2)*getSpeedModifier();
		turn=lowerLimit(turn,0.2)*getSpeedModifier();
		if(practice) {
			pWMDifferentialDrive.arcadeDrive(speed, turn);
		} else {
			cANDifferentialDrive.acadeDrive(speed, turn);
		}
	}
	
	
	
	public void setReverseFlag(Boolean setVal) {
		reverse = setVal;
	}
	
	public void resetReverseFlag() {
		setReverseFlag(false);
	}
	
	public void toggleReverseFlag() {
		setReverseFlag(!(reverse));
	}
	
	
	
	public void resetEncoders() {
		
	}
	
	public double readEncoder() {
	return 0.0;
	}
	
	
	public void highGear() {//@Doug, HoW DOOOooOOOoOooOooOooOOOOOooOOoOooOo??????????????/????//??/??/?????/?
		highGear = true;
	}
	
	
    public void lowGear() {
    	highGear = false;
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

